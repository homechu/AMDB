"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 1.11.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

import logging
import os
import socket

from pathlib import Path

import sentry_sdk

from django.utils.translation import ugettext_lazy as _
from kombu import Exchange, Queue, binding
from django.orm import django_orm_patch
from django.utils import connection, settings, version
from security.aes import AES as Cryptor
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration
from sentry_sdk.integrations.redis import RedisIntegration

from libs import tool

django_orm_patch()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECURITY WARNING: don't run with debug turned on in production!
SECRET_KEY = '7(9#4oty&&)!8==#p+*cpr9=3q_k_r@n%kti&k39smwtf)qrh$'

LOCAL_IP = socket.gethostname()

APOLLO_URL = os.environ.get('APOLLO_URL')

APOLLO_APP = os.environ.get('APOLLO_APP')

APOLLO_NAMESPACE = os.environ.get('APOLLO_NAMESPACE')

APOLLO_KEY = os.environ.get('APOLLO_KEY')

CONF_TYPE, conf = settings.download_from_apollo(
    APOLLO_URL,
    APOLLO_KEY,
    APOLLO_APP,
    APOLLO_NAMESPACE,
    str(BASE_DIR / 'main' / 'config.yml'),
)

CRYPT_KEY = conf['security']['crypt_key']

CRYPTOR = Cryptor(CRYPT_KEY)

PROJECT = conf['main']['project']

CURRENT_ENV: str = conf['main']['current_env'].upper()

DEBUG = conf['main']['debug']

LEVEL = conf['main']['level']

HOSTNAME = socket.gethostname()

CPU_COUNT = os.cpu_count()

MAX_WORKERS = CPU_COUNT * 5

logger = tool.Logger('main', 'stream', LEVEL)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '{asctime}の{levelname}の{name}の{pathname}(line:{lineno}):{message}',  # noqa: E501 correlation_id
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
    },
    'root': {
        'level': str(LEVEL).upper(),
    },
    'loggers': {
        'apps': {
            'handlers': ['console'],
        },
        'main': {
            'handlers': ['console'],
        },
        'libs': {
            'handlers': ['console'],
        },
        'celery': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}

RESOURCE_MANAGER = conf['common']['resource_manager']
CMDB_MANAGER = conf['common']['cmdb_manager']
PERMISSION_SA_ROLES = conf['PERMISSION']['SAROLES']

# RETAINED SETTING
DISK_RETAINED = conf['create_vm'].get('disk_retained', 100)
MEM_RETAINED = conf['create_vm'].get('mem_retained', 4)

# SSO API
SSO_PROJECT = 'AMDB'
SSO_HOST = conf['sso_api']['host']
SSO_TOKEN = conf['sso_api']['token']

VERSION = version.get_version(str(BASE_DIR / 'version.txt'))

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

LOCAL_APPS = [
    'apps.openstacks'
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'drf_yasg',
    'safedelete',
    'django_celery_results',
    'django_extensions',
    'django_filters',
    'import_export',
]

INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.ThreadLocalMiddleware',
    'django.middleware.RequestStartAtMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'libs.base.middleware.AuditMiddleware',
]

ROOT_URLCONF = 'main.urls'

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'libs.base.filters.SearchFilter',
        'libs.base.filters.SAOrderingFilter',
        'libs.base.filters.RangeFilter',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': ['libs.sso.authentications.SSOAuthenticationCMDB'],
    'DEFAULT_RENDERER_CLASSES': ['django.renderers.Renderer'],
    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],
    'EXCEPTION_HANDLER': 'libs.base.exceptions.exception_handler',  # django.views.exception_handler
    'DEFAULT_PAGINATION_CLASS': 'django.pagination.PageNumberPagination',
    'DATETIME_INPUT_FORMATS': ['%Y-%m-%d', '%Y-%m-%d %H:%M:%S', '%Y-%m-%dT%H:%M:%S.%f%z'],
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'ORDERING_CEND_PARAM': 'order_by',
    'COERCE_DECIMAL_TO_STRING': False,
    'PAGE_SIZE': 20,
}

AUDIT_REST_FRAMEWORK = {
    'LOGGER_METHODS': ['POST', 'PUT', 'DELETE'],
    'SKIP_URL_NAMESPACE': ['api:v1:version', 'api:v1:health'],
    'SENSITIVE_KEYS': ['password', 'pass', 'passwd', 'token'],
}


DEFAULT_RENDERER_RESULT_NAME = 'result'

SWAGGER_SETTINGS = {
    'DEFAULT_INFO': 'main.docs.api_info',
    'DEFAULT_GENERATOR_CLASS': 'libs.docs.generators.OpenAPISchemaGenerator',
    'DEFAULT_AUTO_SCHEMA_CLASS': 'django.drf_yasg.inspectors.SwaggerAutoSchema',
    'DEFAULT_PAGINATOR_INSPECTORS': [
        'django.drf_yasg.pagination.ResponsePagination',
        'drf_yasg.inspectors.CoreAPICompatInspector',
    ],
    'DEEP_LINKING': True,
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

LANGUAGES = (
    ('zh-hans', _('Simplified Chinese')),
    ('en', _('English')),
)

STATIC_URL = 'static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

TERRAFORM_CONF_DIR = os.path.join(BASE_DIR, 'libs', 'terraform', 'conf')

TERRAFORM_FILES_DIR = os.path.join(STATIC_ROOT, 'terraform')

ALLOWED_HOSTS = ['*']

SESSION_COOKIE_AGE = 60 * 60 * 6

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

LOGIN_URL = "/login/"

DJANGO_MODEL_AUDIT_WATCH_AUTH_EVENTS = True
DJANGO_MODEL_AUDIT_ADMIN_SHOW_MODEL_EVENTS = True
DJANGO_MODEL_AUDIT_ADMIN_SHOW_AUTH_EVENTS = True
DJANGO_MODEL_AUDIT_ADMIN_SHOW_REQUEST_EVENTS = True

for _type in settings.ConnectType:
    MYSQL_TYPE = _type
    MYSQL_INFO = conf['mysql']
    MYSQL_HOST = MYSQL_INFO[_type]['host']
    MYSQL_PORT = MYSQL_INFO[_type]['port']
    MYSQL_NAME = MYSQL_INFO[_type]['name']
    MYSQL_KEY = MYSQL_INFO[_type]['key']
    MYSQL_USER, MYSQL_PASS = CRYPTOR.pass_decrypt(MYSQL_KEY)
    if connection.is_connect(MYSQL_HOST, MYSQL_PORT):
        break

# RABBITMQ SETTING
for _type in settings.ConnectType:
    MQ_TYPE = _type
    MQ_HOST = conf['rabbit'][_type]['host']
    MQ_PORT = conf['rabbit'][_type]['port']
    MQ_VHOST = conf['rabbit'][_type]['vhost']
    MQ_KEY = conf['rabbit'][_type]['key']
    MQ_USER, MQ_PASS = CRYPTOR.pass_decrypt(MQ_KEY)
    if connection.is_connect(MQ_HOST, MQ_PORT):
        break

# Redis 檢查
for _type in settings.ConnectType:
    REDIS_TYPE = _type
    REDIS_NODES = conf['redis'][_type]['nodes']
    REDIS_KEY = conf['redis'][_type]['key']
    _, REDIS_PASS = CRYPTOR.pass_decrypt(REDIS_KEY)
    if connection.is_connect(REDIS_NODES[0]['host'], REDIS_NODES[0]['port']):
        break

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

SAFE_DELETE_FIELD_NAME = 'is_deleted'

DATABASES = {
    'default': {
        'ENGINE': 'dj_db_conn_pool.backends.mysql',
        'NAME': MYSQL_NAME,
        'HOST': MYSQL_HOST,
        'PORT': MYSQL_PORT,
        'USER': MYSQL_USER,
        'PASSWORD': MYSQL_PASS,
        'POOL_OPTIONS': {'POOL_SIZE': MAX_WORKERS, 'RECYCLE': 3600, 'PRE_PING': True},
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://customredis',
        'KEY_PREFIX': PROJECT,
        'TIMEOUT': 60 * 60 * 24,
        'OPTIONS': {
            'CLIENT_CLASS': 'RedisClusterClient',
            'STARTUP_NODES': REDIS_NODES,
            'PASSWORD': REDIS_PASS,
        },
    },
}

MENUS_CACHE_KEY = 'menus:cache'

# CELERY SETTING
CELERY_BROKER_URL = f'amqp://{MQ_USER}:{MQ_PASS}@{MQ_HOST}:{MQ_PORT}/{MQ_VHOST}'

CELERY_TIMEZONE = TIME_ZONE

CELERY_WORKER_LOG_FORMAT = (
    '%(asctime)sの%(levelname)sの%(name)sの%(pathname)s(line:%(lineno)d)の%(message)s'
)

CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'yaml', 'application/json']

CELERY_RESULT_BACKEND = 'django-cache'

CELERY_RESULT_SERIALIZER = 'json'

CELERY_RESULT_EXPIRES = 3600 * 24 * 7

CELERY_TASK_DEFAULT_QUEUE = PROJECT

CELERY_ARGUMENTS = {'x-message-ttl': 3600 * 6}

CELERY_BEAT_SCHEDULER = 'django.celery.beat:QueueLockScheduler'

CELERY_TASK_QUEUES = [
    Queue(PROJECT, queue_arguments=CELERY_ARGUMENTS),
    Queue(f'{PROJECT}_audit', queue_arguments=CELERY_ARGUMENTS),
    Queue(
        f'{PROJECT}.{HOSTNAME}',
        queue_arguments=CELERY_ARGUMENTS,
        exchange=[
            binding(Exchange(f'{PROJECT}'), routing_key=PROJECT),
            binding(Exchange(f'{PROJECT}.fanout', type='fanout'), routing_key=PROJECT),
        ],
    ),
]

# ELK SETTING
ELK_LOG_TOKEN = conf['elk_log_api']['token']
ELK_LOG_URL = conf['elk_log_api']['elk_url']

# Salt Init
SALT_INIT_RETRY_TIME = conf.get('salt_init_retry', 30)

# PROXY
PROXY_HOST = conf['proxy']['host']
PROXY_PORT = conf['proxy']['port']
PROXY_USER, PROXY_PASSWD = CRYPTOR.pass_decrypt(conf['proxy']['key'])
PROXIES = {"http": f"http://{PROXY_USER}:{PROXY_PASSWD}@{PROXY_HOST}:{PROXY_PORT}"}

# EMAIL SETTING
MSG_URL = conf['msg']['url']

# DICTIONARY SETTING
_DICT = conf.get('dictionary', {})

ERP_MODULE: str = _DICT.get('erp_parameter_key', 'erp_module')

ERP_CURRENCY_TYPE: str = _DICT.get('erp_ct_key', 'erp_currency_type')

ERP_DEFAULT_DEPT: str = _DICT.get('erp_dd_key', 'erp_default_dept')

# SENTRY
SENTRY_HOST = SENTRY_PORT = ''
if conf.get('sentry'):
    SENTRY_HOST = conf['sentry']['host']
    SENTRY_PORT = conf['sentry']['port']
    SENTRY_PROJECT, SENTRY_TOKEN = CRYPTOR.pass_decrypt(conf['sentry']['key'])
    SENTRY_SDK = sentry_sdk.init(
        dsn=f"http{'s' if SENTRY_PORT == 443 else ''}://{SENTRY_TOKEN}@{SENTRY_HOST}/{SENTRY_PROJECT}",
        environment=CURRENT_ENV,
        integrations=[
            DjangoIntegration(),
            LoggingIntegration(
                level=logging.INFO,  # Capture info and above as breadcrumbs
                event_level=logging.ERROR,  # Send errors as events
            ),
            CeleryIntegration(),
            RedisIntegration(),
        ],
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=0.1,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
    )

# Django Debug Toolbar
if DEBUG and CURRENT_ENV == 'LOCAL':
    INSTALLED_APPS += ['debug_toolbar']
    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
    hostname, _, INTERNAL_IPS = socket.gethostbyname_ex(socket.gethostname())
